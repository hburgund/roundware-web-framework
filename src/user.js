import logger from "./logger";

var deviceId, clientType, userName, apiClient;
var authToken = "UNKNOWN";
var userName = "(anonymous)";

export class User {
  constructor(options) {
    apiClient = options.apiClient;

    // TODO need to try to persist deviceId as a random value that can partially serve as "a unique identifier generated by the client" that can 
    // used to claim a anonymous user's contributions. Some ideas for implementation: https://clientjs.org/ and https://github.com/Valve/fingerprintjs2
    deviceId = options.deviceId || "00000000000000"; 
    clientType = options.clientType || "web";
  }

  toString() {
    return "User '" + userName + "'";
  }

  connect() {
    var data = {
      device_id: deviceId,
      client_type: clientType
    };

    return apiClient.post("/users/",data).
      done(function connectionSuccess(data) {
        userName = data.username;
        apiClient.setAuthToken(data.token);
      });
  }
}
